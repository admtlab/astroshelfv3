// Generated by CoffeeScript 1.3.3
var Overlay, Tile,
__bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Tile = (function() {

    //Tile.Texture = null;

    function Tile(skyview, gl, Math, survey, type, texture, fits, range) {
	this.VertexPositionBuffer = null;
	this.VertexColorBuffer = null;
	this.VertexIndexBuffer = null;
	this.VertexTextureCoordBuffer = null;
	this.VertexNormalBuffer = null;
	this.imgURL= "";
	this.gl = gl;
	this.skyview = skyview;
	this.Math = Math;
	this.range = range;
	this.ra = 0.0;
	this.dec = 0.0;
	this.survey = survey;
	this.binded = true;
	this.render = __bind(this.render, this);

	this.bind = __bind(this.bind, this);

	this.createTile = __bind(this.createTile, this);

	this.initTexture = __bind(this.initTexture, this);

	this.handleLoadedTexture = __bind(this.handleLoadedTexture, this);

	this.deleteTexture = __bind(this.deleteTexture, this);
	
	this.tempImage = new Image();
	this.tempImage = $("#temp")[0].src;
	
	
	if (type === "sky") {
	    this.proj = new Projection(this.Math);
	    if (this.survey === "FIRST") {
		
		var tex = texture.split("+");
		var tex2 = texture.split("-");
		var ext = "";
		
		if(tex.length > 1){

		    ext = tex[1].split(".");
		    texture = tex[0] + "%2B" + tex[1];
		    ext = texture.split(".");
		}
		else{
		    texture = tex2[0] + "%2D" + tex2[1];	 
		    ext = texture.split(".");
		}
		
		//level = ext[1] + "_2.jpeg";
		this.imgURL = './lib/db/remote/FIRST.php?image=' + ext[0] + "_1.jpeg";
		//console.log(this.imgURL);
		this.proj.init(this.imgURL, fits, this, survey);
		
	    } else if (this.survey === "SDSS") {
		this.imgURL = "./lib/db/remote/SDSS.php?url=" + texture + "-z10.jpeg&zoom=4";
		//var mFits = "/var/www/html/headers/" + texture.substring(43,54) + "r" + texture.substring(54,55) + "-" + texture.substring(59,63) + ".txt"
		this.proj.init(this.imgURL, fits, this, this.survey);
		
	 }else if(this.survey == "LSST"){
		
		var reduced = texture.split(".jpeg");
		var reducedImage = reduced[0] + "_3.jpeg";
		
		this.imgURL = "./lib/db/remote/LSST.php?image=" + reducedImage;
		this.proj.init(this.imgURL, texture, this, this.survey);
	    }
	    
	} else if (type === "custom") {
	    this.initTexture(texture);
	    //console.log(range);
	    this.createTile( [range[0], range[0], range[1], range[1]], [range[3], range[2], range[2], range[3]] );
	}
	return;
    }

    Tile.prototype.handleLoadedTexture = function(texture) {
	
	this.gl.bindTexture(this.gl.TEXTURE_2D, texture);
	this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.img);
	this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
	this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
	this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
	this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
	this.gl.bindTexture(this.gl.TEXTURE_2D, null);
	this.binded = true;
	this.skyview.dirty = true;
	
    };

    Tile.prototype.initTexture = function(image) {
	
	var _this = this;
	//_this.Texture = _this.gl.createTexture();

	if(this.img == undefined){
		
		this.img = new Image();
		
		$(this.img)
			
			.load(function(){
				
				_this.Texture = _this.gl.createTexture();
				return _this.handleLoadedTexture(_this.Texture);
				
				//$("#temp")	
				//	.append(this);
			})
			
			.error(function(){
				console.log("run!! this message shouldn't print!!");	
			})
			
			.attr("src", image);
		
		return this.tempImage;
		
		// 
		// this.img.onload = function() {
		// 	
		// 	return _this.handleLoadedTexture(_this.Texture);
		// };
	    
		//return this.img.src = image;
	}
	else{
		_this.Texture = _this.gl.createTexture();
	    _this.handleLoadedTexture(_this.Texture)
	}


    };

    Tile.prototype.deleteTexture = function(){
	this.gl.deleteTexture(this.Texture);
	this.binded = false;
    };

    Tile.prototype.createTile = function(ra, dec) {
	var coord, coords, cosPhi, cosTheta, indexData, normalData, phi, radius, sinPhi, sinTheta, textureCoordData, theta, vertexPositionData, x, y, z, _i, _len;
	this.ra = ra;
	this.dec = dec;
	
	//console.log(ra,dec);
	//console.log(this.img.src);

	radius = 1;
	vertexPositionData = [];
	normalData = [];
	textureCoordData = [];
	
	if ((ra != null) && (dec != null)) {
	    
	    coords = [];
	    for(_i = 0; _i < ra.length; _i++){
		coords.push([ra[_i], dec[_i]]);
	    }
	    this.range = coords;
	    //coords = [[ra[0], dec[0]], [ra[1], dec[1]], [ra[2], dec[2]], [ra[3], dec[3]]];
	    
	    for (_i = 0, _len = coords.length; _i < _len; _i++) {
		
		coord = coords[_i];
		phi = (90 - coord[1]) * Math.PI / 180.0;
		theta = 0;
		
		if (coord[0] > 270) {
		    theta = (270 - coord[0] + 360) * Math.PI / 180.0;
		} else {
		    theta = (270 - coord[0]) * Math.PI / 180.0;
		}
		
		sinTheta = Math.sin(theta);
		cosTheta = Math.cos(theta);
		sinPhi = Math.sin(phi);
		cosPhi = Math.cos(phi);
		
		z = sinPhi * sinTheta;
		y = cosPhi;
		x = sinPhi * cosTheta;
		
		vertexPositionData.push(radius * x);
		vertexPositionData.push(radius * y);
		vertexPositionData.push(radius * z);
		
	    }
	    
	    textureCoordData = [0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0];
	    indexData = [0, 3, 2, 2, 1, 0];
	}
	this.VertexPositionBuffer = this.gl.createBuffer();
	this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.VertexPositionBuffer);
	this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertexPositionData), this.gl.STATIC_DRAW);
	this.VertexPositionBuffer.itemSize = 3;
	this.VertexPositionBuffer.numItems = vertexPositionData.length / 3;
	this.VertexIndexBuffer = this.gl.createBuffer();
	this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.VertexIndexBuffer);
	this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), this.gl.STATIC_DRAW);
	this.VertexIndexBuffer.itemSize = 1;
	this.VertexIndexBuffer.numItems = indexData.length;
	this.VertexTextureCoordBuffer = this.gl.createBuffer();
	this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.VertexTextureCoordBuffer);
	this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(textureCoordData), this.gl.STATIC_DRAW);
	this.VertexTextureCoordBuffer.itemSize = 2;
	return this.VertexTextureCoordBuffer.numItems = textureCoordData.length / 2;
    };

    Tile.prototype.bind = function(shaderProgram) {
	if(!this.binded){
	    this.initTexture();
	}
	this.gl.bindTexture(this.gl.TEXTURE_2D, this.Texture);
	//this.gl.uniform1i(shaderProgram.Uniform, 0);
	this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.VertexPositionBuffer);
	this.gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, this.VertexPositionBuffer.itemSize, this.gl.FLOAT, false, 0, 0);
	this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.VertexTextureCoordBuffer);
	this.gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, this.VertexTextureCoordBuffer.itemSize, this.gl.FLOAT, false, 0, 0);
	this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.VertexIndexBuffer);
    };

    Tile.prototype.render = function(renderMode) {
	return this.gl.drawElements(renderMode, this.VertexIndexBuffer.numItems, this.gl.UNSIGNED_SHORT, 0);
    };

    return Tile;

})();

Overlay = (function() {

    Overlay.survey = null;

    Overlay.set = null;

    Overlay.alpha = 1.0;

    Overlay.name = '';

    Overlay.cache = {};

    Overlay.filename = '';

    function Overlay(SkyView, survey, range, name) {
	this.SkyView = SkyView;
	this.createUpOverlay = __bind(this.createUpOverlay, this);
	this.customize = __bind(this.customize, this);
	this.deleteOverlay = __bind(this.deleteOverlay, this);
	this.setAlpha = __bind(this.setAlpha, this);
	this.createCustomOverlay = __bind(this.createCustomOverlay, this);
	this.createSDSSOverlay = __bind(this.createSDSSOverlay, this);
	this.createLSSTOverlay = __bind(this.createLSSTOverlay, this);
	this.createFIRSTOverlay = __bind(this.createFIRSTOverlay, this);
	this.refresh = function() {
	    return 0;
	};
	this.survey = survey;
	this.tiles = [];
	this.cache = {};
	if (this.survey === "SDSS") {
	    this.createSDSSOverlay();
	} else if (this.survey === "LSST") {
	    this.createLSSTOverlay();
	} else if (this.survey === "FIRST") {
	    this.createFIRSTOverlay();
	} else if (this.survey === "custom") {
	    console.log("making a custom overlay!");
	} else if (this.survey === "upload") {
	    console.log("making an uploaded overlay!");
	}
	this.alpha = 1.0;
	this.name = name;
	return;
    }

    Overlay.prototype.createFIRSTOverlay = function() {
	var temp_this,
	_this = this;
	this.firstflag = false;
	temp_this = this;
	
	this.refresh = function() {
		
	    var done, getInfo, range, url;
	    url = './lib/db/remote/queryMongoFIRST.php';
	    range = _this.SkyView.getBoundingBox();
	    
		getInfo = {
			RAMin: range.maxRA,
			RAMax: range.minRA,
			DecMin: range.maxDec,
			DecMax: range.minDec,
			scale:  2
	    };

	    done = function(e) {
		var image, name, _i, params;
		for (_i = 0; _i < e.length; _i+=2) {
		    
		    image = e[_i];
			params = e[_i+1];
		    //name = image.split("../../images/");
		    
		    if (!temp_this.cache[image]) {
				_this.tiles.push(new Tile(_this.SkyView, _this.SkyView.gl, _this.SkyView.Math, "FIRST", "sky", image, params , getInfo));
				temp_this.cache[image] = true;
		    }
			}// end for
	    }; // end done
		//console.log(getInfo);
	    // normal case.
	    if(getInfo.RAMin < getInfo.RAMax){
			$.get(url, getInfo, done, 'json');
	    }
	    // On the border!
	    else{
		var getInfoSplit = {
		    RAMin: range.maxRA,
		    RAMax: 360.000,
		    DecMin: range.maxDec,
		    DecMax: range.minDec,
			scale:  2
		};
		getInfo.RAMin = 0.0000;
		$.get(url, getInfo, done, 'json');
		$.get(url, getInfoSplit, done, 'json');
	    }
	};
	this.refresh();
    };

    Overlay.prototype.createLSSTOverlay = function() {
	var lfile,
	_this = this;
	this.lsstarray = [];
	this.lsstflag = false;
	temp_this = this;
	lfile = new XMLHttpRequest();
	
	lfile.open('GET', './lib/skyview/lsstFiles.txt', true);
	
	lfile.onload = function(e) {	
	    
	    var image, lines, text, _i, _len, _ref, _results;
	    
	    text = lfile.responseText;
	    lines = text.split("\n");
	    
	    $.each(lines, function(key, val) {
		
		return _this.lsstarray.push(val);
	    });
	    var range = _this.SkyView.getBoundingBox();
	    _ref = _this.lsstarray;
	    _results = [];
	    
	    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
		image = _ref[_i];
		
		if (!temp_this.cache[image]) {
		    _results.push(_this.tiles.push(new Tile(_this.SkyView, _this.SkyView.gl, _this.SkyView.Math, "LSST", "sky", "" + image, "", range)));
		    temp_this.cache[image] = true;
			}
	    }// end for
	    
	    return _results;
	}; // end load
	lfile.send();
    }
		
    Overlay.prototype.createSDSSOverlay = function() {
		var temp_this,
		_this = this;
		//this.firstflag = false;
		temp_this = this;
	
		this.refresh = function() {
			
			var done, getInfo, range, url;
		    url = './lib/db/remote/queryMongoSDSS.php';
		    range = _this.SkyView.getBoundingBox();
		    
		    getInfo = {
				RAMin: range.maxRA,
				RAMax: range.minRA,
				DecMin: range.maxDec,
				DecMax: range.minDec,
				RACenter: (range.maxRA + range.minRA) / 2.0,
				DecCenter: (range.maxDec + range.minDec) / 2.0
		    	
			};

			done = function(e) {
			
				var image, params, name, _i, _len;
				for (index = _i = 0, _len = e.length; _i < _len; _i+=2) {
		    		
				    //image = e[0];
				    image = e[_i]; 
				    params = e[_i+1];
				    if ( !temp_this.cache[image] ) {
 						_this.tiles.push(new Tile(_this.SkyView, _this.SkyView.gl, _this.SkyView.Math, "SDSS", "sky", image, params, range));
 						temp_this.cache[image] = true;
				    } // end if
				} // end for
	    
			}; // end done
		    
		    // normal case.
		    if(getInfo.RAMin < getInfo.RAMax){
				$.get(url, getInfo, done, 'json');
		    }
		    // On the border!
		    else{
			var getInfoSplit = {
			    RAMin: range.maxRA,
			    RAMax: 360.000,
			    DecMin: range.maxDec,
			    DecMax: range.minDec,
				RACenter: (range.maxRA + range.minRA) / 2.0,
				DecCenter: (range.maxDec + range.minDec) / 2.0
			};
				getInfo.RAMin = 0.0000;
				$.get(url, getInfo, done, 'json');
				$.get(url, getInfoSplit, done, 'json');
		    }
			
		}; // end refresh

		this.refresh();
		//this.SkyView.dirty = true;
		return;
			
	}; // end createSDSS
	
    Overlay.prototype.createCustomOverlay = function(raDec, raMin, raMax, decMin, decMax, color, label) {
	
	var bl, br, height, img, imgURL, ndecMax, ndecMin, nraMax, nraMin, range, scale, tile, tl, tr, val, width, xy, _i, _len, raXYMin, decXYMin, raXYMax, decXYMax;
	var temp_this = this;
	var _this = this;
	
	scale = 1.0;
	img = '';
	
	//original RA DEC stuff
	var widthRA = Math.abs(parseFloat(raMax)) - Math.abs(parseFloat(raMin));
	var widthDec = Math.abs(parseFloat(decMax)) - Math.abs(parseFloat(decMin));
	var centerRA =  ( parseFloat(raMax) + parseFloat(raMin) ) / 2.0;
	var centerDec =  ( parseFloat(decMax) + parseFloat(decMin) ) / 2.0;
	//console.log('ra dec', raMin, raMax, decMin, decMax);
	
	if (widthRA < 1.0 || widthDec < 1.0) {
	    nraMin = parseFloat(raMin) - 0.1;
	    nraMax = parseFloat(raMax) + 0.1;
	    ndecMin = parseFloat(decMin) - 0.1;
	    ndecMax = parseFloat(decMax) + 0.1;
	} else {
	    nraMin = parseFloat(raMin);
	    nraMax = parseFloat(raMax);
	    ndecMin = parseFloat(decMin);
	    ndecMax = parseFloat(decMax);
	}
	var widthRA = Math.abs(parseFloat(nraMax)) - Math.abs(parseFloat(nraMin));
	var widthDec = Math.abs(parseFloat(ndecMax)) - Math.abs(parseFloat(ndecMin));
	var centerRA =  ( parseFloat(nraMax) + parseFloat(nraMin) ) / 2.0;
	var centerDec =  ( parseFloat(ndecMax) + parseFloat(ndecMin) ) / 2.0;
	
	minrows = this.SkyView.Math.ToImgCoord(nraMin, ndecMin, nraMin, ndecMin, widthRA, widthDec);
	maxrows = this.SkyView.Math.ToImgCoord(nraMax, ndecMax, nraMin, ndecMin, widthRA, widthDec);
	cenrows = this.SkyView.Math.ToImgCoord(centerRA, centerDec, nraMin, ndecMin, widthRA, widthDec);

	//XY conversions
	var min = this.SkyView.Math.radecToImageXY(parseFloat(nraMin),parseFloat(ndecMin));
	var max = this.SkyView.Math.radecToImageXY(parseFloat(nraMax),parseFloat(ndecMax));
	raXYMin = min[0]; decXYMin = min[1];
	raXYMax = max[0]; decXYMax = max[1];
	var widthRAXY = Math.abs(parseFloat(raXYMax) - parseFloat(raXYMin)); 
	var widthDecXY = Math.abs(parseFloat(decXYMax) - parseFloat(decXYMin)); 
	var centerRAXY =  ( parseFloat(raXYMax) + parseFloat(raXYMin) ) / 2.0;
	var centerDecXY =  ( parseFloat(decXYMax) + parseFloat(decXYMin) ) / 2.0;

	minxyrows = this.SkyView.Math.ToImgCoord(raXYMin, decXYMin, raXYMin, decXYMin, widthRAXY, widthDecXY);
	maxxyrows = this.SkyView.Math.ToImgCoord(raXYMax, decXYMax, raXYMin, decXYMin, widthRAXY, widthDecXY);
	cenxyrows = this.SkyView.Math.ToImgCoord(centerRAXY, centerDecXY, raXYMin, decXYMin, widthRAXY, widthDecXY);
	
	this.refresh = function() {
	    
	    xy = [];
	    
	    for (_i = 0, _len = raDec.length; _i < _len; _i++) {
		val = raDec[_i];
		tmp=this.SkyView.Math.radecToImageXY(parseFloat(val[0]), parseFloat(val[1]));
		xy.push(tmp);
	    }
	    
	    var minBoundRA = Math.floor(raMin);
	    var maxBoundRA = Math.ceil(raMax);
	    
	    //console.log(minBoundRA);
	    //console.log(maxBoundRA);
	    
	    var minBoundDec = Math.floor(decMin);
	    var maxBoundDec = Math.ceil(decMax);
	    
	    //console.log(minBoundDec);
	    //console.log(maxBoundDec);
	    
	    for(var _lowerRA = minBoundRA; _lowerRA < maxBoundRA; _lowerRA += 0.25){
		
		for(var _lowerDec = minBoundDec; _lowerDec < maxBoundDec; _lowerDec += 0.25){
		    
		    _upperRA = _lowerRA + 0.25;
		    _upperDec = _lowerDec + 0.25;
		    
		    var objs = [];
		    for(_i = 0; _i < raDec.length; _i++){
			
			var ra = parseFloat(raDec[_i][0]);
			var dec = parseFloat(raDec[_i][1]);
			
			if(ra >= _lowerRA && ra < _upperRA &&
			   dec >= _lowerDec && dec < _upperDec){
			    
			    //console.log(raDec[_i]);
			    objs.push(xy[_i]);	
			    
			} // end if
		    } // end for _i 
		    
		    // no objects in this part of the sky
		    if(objs.length == 0){
			//console.log("no objs");
			continue;
		    }
		    
		    var _min = this.SkyView.Math.radecToImageXY(_lowerRA, _lowerDec);
		    var _max = this.SkyView.Math.radecToImageXY(_upperRA, _upperDec);
		    
		    var _widthXY = Math.abs(parseFloat(_max[0] - _min[0]));
		    var _heightXY = Math.abs(parseFloat(_max[1] - _min[1]));
		    /* TODO: Why was this set to false?
		       $.ajaxSetup({
		       'async': false
		       });	
		    */
		    $.ajax({
			type: 'POST',
			url: "./lib/createOverlay.php",
			data: {
			    'RAMin': _min[0],
			    'DecMin': _min[1],
			    'spanx': _widthXY,
			    'spany': _heightXY,
			    'scale': 1.8,
			    'diam': 1,
			    'color': color,
			    'dataType' : "cat",
			    'table': JSON.stringify(objs)
			},
			success: function(data) {
			    img = data.substring(data.length - 36, data.length);
			}
		    });
		    $.ajaxSetup({
			'async': true
		    });
		    if(img == "" || img == null || img == undefined){
			return
		    }
		    imgURL = "http://astro.cs.pitt.edu/Custom/" + img;
		    
		    this.filename = img;
		    this.name = img;
		    
		    range = [_lowerRA, _upperRA, _lowerDec, _upperDec];

		    if(!temp_this.cache[temp_this.name]){
			
			tile = new Tile(temp_this.SkyView, temp_this.SkyView.gl,temp_this.SkyView.Math, "custom", "custom", imgURL, null, range);
			temp_this.cache[temp_this.name] = true;
			temp_this.tiles.push(tile);
			
		    }	// end if
		} // end _j
	    } // end _i
	    
	};
	
	this.refresh();
	this.SkyView.dirty = true;
	return;
    }

    Overlay.prototype.setAlpha = function(value) {
	this.alpha = value;
	this.SkyView.dirty = true;
	
    };

    Overlay.prototype.deleteOverlay = function(overlay) {
	var _this = this;
	this.SkyView.deleteOverlay(this.filename);
	$.ajaxSetup({
	    'async': false
	});
	$.ajax({
	    type: 'POST',
	    url: "./lib/deleteOverlay.php",
	    data: {
		'file': this.filename
	    },
	    success: function(data) {
		if (data) {
		    console.log("deleteOverlay success? yes", data);
		}
	    }
	});
	$.ajaxSetup({
	    'async': true
	});
    };

    Overlay.prototype.customize = function() {
	//console.log("inside customize");
    };

    Overlay.prototype.createUpOverlay = function(image) {
	var FITS, xhr,
	_this = this;
	//console.log("creating uploaded overlay");
	//console.log("image: ", image.name);
	FITS = require('fits');
	this.params = new Object;
	xhr = new XMLHttpRequest();
	xhr.open('GET', "images/" + image.name);
	xhr.responseType = 'arraybuffer';
	xhr.onload = function(e) {
	    var fits, hdu;
	    fits = new FITS.File(xhr.response);
	    hdu = fits.getHDU();
	    _this.params.naxis1 = hdu.getCard("NAXIS1");
	    return _this.params.naxis1 = hdu.header["NAXIS1"];
	};
	xhr.send();
    };

    return Overlay;

})();
