// Generated by CoffeeScript 1.3.3
(function() {
  var CompImage, Header, Image, ImageStats;

  Header = require('./fits.header');

  Image = require('./fits.image');

  CompImage = require('./fits.compressedimage');

  ImageStats = (function() {

    function ImageStats(image) {
      var _ref;
      this.image = image;
      _ref = this.image.getExtremes(), this.minimum = _ref[0], this.maximum = _ref[1];
      this.pixels = this.image.naxis.reduce(function(a, b) {
        return a * b;
      });
      this.mean = void 0;
      this.std = void 0;
      this.histogram = void 0;
      this.bins = void 0;
    }

    ImageStats.prototype.computeMean = function() {
      var pixel, sum, _i, _len, _ref;
      if (this.mean != null) {
        return this.mean;
      }
      sum = 0;
      _ref = this.image.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pixel = _ref[_i];
        sum += pixel;
      }
      return this.mean = sum / this.pixels;
    };

    ImageStats.prototype.computeSTD = function() {
      var diff, pixel, sum, _i, _len, _ref;
      if (this.std != null) {
        return this.std;
      }
      if (this.mean == null) {
        this.computeMean();
      }
      sum = 0;
      _ref = this.image.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pixel = _ref[_i];
        diff = pixel - this.mean;
        sum += diff * diff;
      }
      return this.std = Math.sqrt(sum / this.pixels);
    };

    ImageStats.prototype.computeHistogram = function(bins) {
      var arrayType, binSize, data, index, pixel, range, _i, _len;
      this.bins = bins != null ? bins : 100;
      range = this.maximum - this.minimum;
      binSize = range / this.bins;
      data = this.image.data;
      if (this.pixels < 256) {
        arrayType = Uint8Array;
      } else if (this.pixels < 65535) {
        arrayType = Uint16Array;
      } else {
        arrayType = Uint32Array;
      }
      this.histogram = new arrayType(this.bins + 1);
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        pixel = data[_i];
        index = Math.floor(((pixel - this.minimum) / range) * this.bins);
        this.histogram[index] += 1;
      }
      return this.histogram;
    };

    return ImageStats;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ImageStats;
  }

}).call(this);
