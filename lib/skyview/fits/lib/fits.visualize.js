// Generated by CoffeeScript 1.3.3
(function() {
  var Visualize;

  Visualize = (function() {

    Visualize.GET_A_WEBGL_BROWSER = '' + 'This page requires a browser that supports WebGL.<br/>' + '<a href="http://get.webgl.org">Click here to upgrade your browser.</a>';

    Visualize.OTHER_PROBLEM = '' + "It doesn't appear your computer can support WebGL.<br/>" + '<a href="http://get.webgl.org/troubleshooting/">Click here for more information.</a>';

    Visualize.vertexShader = ["attribute vec2 a_position;", "void main() {", "gl_Position = vec4(a_position, 0, 1);", "}"].join("\n");

    Visualize.fragmentShaders = {
      linear: ["precision mediump float;", "uniform vec2 u_resolution;", "uniform sampler2D u_tex;", "uniform vec2 u_extremes;", "void main() {", "vec2 texCoord = gl_FragCoord.xy / u_resolution;", "vec4 pixel_v = texture2D(u_tex, texCoord);", "float min = u_extremes[0];", "float max = u_extremes[1];", "float pixel = (pixel_v[0] - min) / (max - min);", "gl_FragColor = vec4(pixel, pixel, pixel, 1.0);", "}"].join("\n"),
      logarithm: ["precision mediump float;", "uniform vec2 u_resolution;", "uniform sampler2D u_tex;", "uniform vec2 u_extremes;", "void main() {", "vec2 texCoord = gl_FragCoord.xy / u_resolution;", "vec4 pixel_v = texture2D(u_tex, texCoord);", "float min = log(u_extremes[0]);", "float max = log(u_extremes[1]);", "float pixel = (log(pixel_v[0]) - min) / (max - min);", "gl_FragColor = vec4(pixel, pixel, pixel, 1.0);", "}"].join("\n"),
      sqrt: ["precision mediump float;", "uniform vec2 u_resolution;", "uniform sampler2D u_tex;", "uniform vec2 u_extremes;", "void main() {", "vec2 texCoord = gl_FragCoord.xy / u_resolution;", "vec4 pixel_v = texture2D(u_tex, texCoord);", "float min = sqrt(u_extremes[0]);", "float max = sqrt(u_extremes[1]);", "float pixel = (sqrt(pixel_v[0]) - min) / (max - min);", "gl_FragColor = vec4(pixel, pixel, pixel, 1.0);", "}"].join("\n"),
      arcsinh: ["precision mediump float;", "uniform vec2 u_resolution;", "uniform sampler2D u_tex;", "uniform vec2 u_extremes;", "float arcsinh(float value) {", "return log(value + sqrt(1.0 + value * value));", "}", "void main() {", "vec2 texCoord = gl_FragCoord.xy / u_resolution;", "vec4 pixel_v = texture2D(u_tex, texCoord);", "float min = arcsinh(u_extremes[0]);", "float max = arcsinh(u_extremes[1]);", "float value = arcsinh(pixel_v[0]);", "float pixel = (value - min) / (max - min);", "gl_FragColor = vec4(pixel, pixel, pixel, 1.0);", "}"].join("\n"),
      power: ["precision mediump float;", "uniform vec2 u_resolution;", "uniform sampler2D u_tex;", "uniform vec2 u_extremes;", "void main() {", "vec2 texCoord = gl_FragCoord.xy / u_resolution;", "vec4 pixel_v = texture2D(u_tex, texCoord);", "float min = pow(u_extremes[0], 2.0);", "float max = pow(u_extremes[1], 2.0);", "float pixel = (pow(pixel_v[0], 2.0) - min) / (max - min);", "gl_FragColor = vec4(pixel, pixel, pixel, 1.0);", "}"].join("\n"),
      color: ["precision mediump float;", "uniform vec2 u_resolution;", "uniform sampler2D u_tex_g;", "uniform sampler2D u_tex_r;", "uniform sampler2D u_tex_i;", "uniform vec2 u_extremes;", "float arcsinh(float value) {", "return log(value + sqrt(1.0 + value * value));", "}", "float f(float minimum, float maximum, float value) {", "float pixel = clamp(value, minimum, maximum);", "float alpha = 0.02;", "float Q = 8.0;", "return arcsinh(alpha * Q * (pixel - minimum)) / Q;", "}", "void main() {", "vec2 texCoord = gl_FragCoord.xy / u_resolution;", "vec4 pixel_v_g = texture2D(u_tex_g, texCoord);", "vec4 pixel_v_r = texture2D(u_tex_r, texCoord);", "vec4 pixel_v_i = texture2D(u_tex_i, texCoord);", "float minimum = u_extremes[0];", "float maximum = u_extremes[1];", "float g = pixel_v_g[0];", "float r = pixel_v_r[0];", "float i = pixel_v_i[0];", "float I = (g + r + i) / 3.0;", "float fI = f(minimum, maximum, I);", "float fII = fI / I;", "float R = i * fII;", "float G = r * fII;", "float B = g * fII;", "float RGBmax = max(max(R, G), B);", "if (RGBmax > 1.0) {", "R = R / RGBmax;", "G = G / RGBmax;", "B = B / RGBmax;", "}", "if (I == 0.0) {", "R = 0.0;", "G = 0.0;", "B = 0.0;", "}", "gl_FragColor = vec4(R, G, B, 1.0);", "}"].join("\n")
    };

    function Visualize(imgset, el) {
      var buffer, positionLocation, resolutionLocation, tex, vertexShader;
      this.imgset = imgset;
      this.el = el;
      this.imgset.getExtremes();
      this.width = this.imgset.getWidth();
      this.height = this.imgset.getHeight();
      this.minimum = this.imgset.minimum;
      this.maximum = this.imgset.maximum;
      this.setupUI(this.width, this.height);
      this.gl = this.setupWebGL();
      if (!this.gl) {
        alert("No WebGL");
        return null;
      }
      this.ext = this.gl.getExtension("OES_texture_float");
      if (!this.ext) {
        alert("No OES_texture_float");
        return null;
      }
      vertexShader = this.loadShader(Visualize.vertexShader, this.gl.VERTEX_SHADER);
      this.fragmentShader = this.loadShader(Visualize.fragmentShaders["linear"], this.gl.FRAGMENT_SHADER);
      this.createProgram([vertexShader, this.fragmentShader]);
      this.gl.useProgram(this.program);
      positionLocation = this.gl.getAttribLocation(this.program, "a_position");
      resolutionLocation = this.gl.getUniformLocation(this.program, "u_resolution");
      this.stretchLocation = this.gl.getUniformLocation(this.program, "u_stretch");
      this.gl.uniform2f(resolutionLocation, this.width, this.height);
      this.extremesLocation = this.gl.getUniformLocation(this.program, "u_extremes");
      this.gl.uniform2f(this.extremesLocation, this.minimum, this.maximum);
      buffer = this.gl.createBuffer();
      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);
      this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1]), this.gl.STATIC_DRAW);
      this.gl.enableVertexAttribArray(positionLocation);
      this.gl.vertexAttribPointer(positionLocation, 2, this.gl.FLOAT, false, 0, 0);
      tex = this.gl.createTexture();
      this.gl.bindTexture(this.gl.TEXTURE_2D, tex);
      this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.LUMINANCE, this.width, this.height, 0, this.gl.LUMINANCE, this.gl.FLOAT, this.imgset[0].getHDU().data.getFrameWebGL());
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
      this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
      console.log(this.gl.getError());
    }

    Visualize.prototype.setupWebGL = function(opt_attribs) {
      var context, showLink;
      showLink = function(str) {
        var container;
        container = this.canvas.parentNode;
        if (container) {
          return container.innerHTML = this.makeFailHTML(str);
        }
      };
      if (!window.WebGLRenderingContext) {
        showLink(Visualize.GET_A_WEBGL_BROWSER);
        return null;
      }
      context = this.create3DContext(this.canvas, opt_attribs);
      if (!context) {
        showLink(Visualize.OTHER_PROBLEM);
      }
      return context;
    };

    Visualize.prototype.create3DContext = function(opt_attribs) {
      var context, index, name, names, _i, _len;
      names = ["webgl", "experimental-webgl"];
      context = null;
      for (index = _i = 0, _len = names.length; _i < _len; index = ++_i) {
        name = names[index];
        try {
          context = this.canvas.getContext(name, opt_attribs);
        } catch (e) {

        }
        if (context) {
          break;
        }
      }
      return context;
    };

    Visualize.prototype.makeFailHTML = function(msg) {
      return '' + '<table style="background-color: #8CE; width: 100%; height: 100%;"><tr>' + '<td align="center">' + '<div style="display: table-cell; vertical-align: middle;">' + '<div style="">' + msg + '</div>' + '</div>' + '</td></tr></table>';
    };

    Visualize.prototype.createProgram = function(shaders, opt_attribs, opt_locations) {
      var attribute, index, linked, options, shader, _i, _j, _len, _len1;
      this.program = this.gl.createProgram();
      for (index = _i = 0, _len = shaders.length; _i < _len; index = ++_i) {
        shader = shaders[index];
        this.gl.attachShader(this.program, shader);
      }
      if (opt_attribs != null) {
        for (index = _j = 0, _len1 = opt_attribs.length; _j < _len1; index = ++_j) {
          attribute = opt_attribs[index];
          options = opt_locations != null ? opt_locations[index] : index;
          this.gl.bindAttribLocation(this.program, options, attribute);
        }
      }
      this.gl.linkProgram(this.program);
      linked = this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS);
      if (!linked) {
        throw "Error in program linking: " + (this.gl.getProgramInfoLog(this.program));
        this.gl.deleteProgram(this.program);
        return null;
      }
    };

    Visualize.prototype.loadShader = function(shaderSource, shaderType) {
      var compiled, lastError, shader;
      shader = this.gl.createShader(shaderType);
      this.gl.shaderSource(shader, shaderSource);
      this.gl.compileShader(shader);
      compiled = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);
      if (!compiled) {
        lastError = this.gl.getShaderInfoLog(shader);
        throw "Error compiling shader " + shader + ": " + lastError;
        this.gl.deleteShader(shader);
        return null;
      }
      return shader;
    };

    Visualize.prototype.setupUI = function(width, height) {
      var container, parent;
      container = document.getElementById(this.el.getAttribute("id"));
      if (container !== null) {
        while (container.children.length > 0) {
          container.removeChild(container.children[0]);
        }
      }
      parent = document.createElement("div");
      parent.setAttribute("class", "fits-viewer");
      this.canvas = document.createElement("canvas");
      this.canvas.setAttribute("width", width);
      this.canvas.setAttribute("height", height);
      this.el.appendChild(parent);
      return parent.appendChild(this.canvas);
    };

    Visualize.prototype.scale = function(minimum, maximum) {
      this.gl.uniform2f(this.extremesLocation, minimum, maximum);
      return this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
    };

    Visualize.prototype.stretch = function(value) {
      this.gl.detachShader(this.program, this.fragmentShader);
      this.gl.deleteShader(this.fragmentShader);
      this.fragmentShader = this.loadShader(Visualize.fragmentShaders[value], this.gl.FRAGMENT_SHADER);
      this.gl.attachShader(this.program, this.fragmentShader);
      return this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);
    };

    return Visualize;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Visualize;
  }

}).call(this);
